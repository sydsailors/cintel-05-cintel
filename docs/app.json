[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\n# From shiny, import just reactive and render \nfrom shiny import reactive, render\n\n# From shiny.express, import just ui and inputs if needed\nfrom shiny.express import ui, input\n\n# Add more imports as needed\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# Set a constant UPDATE INTERVAL for all live data\n# Initialize a REACTIVE VALUE with a common data structure\n# This reactive value is used to store state (information)\n# This reactive value is a wrapper around a DEQUE of readings\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 5\nDEQUE_SIZE: int = 7\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# --------------------------------------------\n# Initialize a REACTIVE CALC that all display components can call \n# to get the latest data and display it. \n# The calculation is invalidated every UPDATE_INTERVAL_SECS \n# to trigger updates.\n# It returns to a tuple with everything needed to display the data.\n# Very easy to expand or modify. \n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n    # Data generation logic\n    temperature = round(random.uniform(-18, -16), 1)\n    time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\": temperature, \"timestamp\": time}\n    \n    # Get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry \n\n    # Return a tuple with everything we need \n    return deque_snapshot, df, latest_dictionary_entry\n\n# --------------------------------------------\n# Define the Shiny UI Page layout\n# Call the ui.page_opts() function\n# --------------------------------------------\n\nui.page_opts(title=\"PyShiny Express: Live Data Example\", fillable=True)\n\n# Sidebar is typically used for user interaction/information\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\"A demonstration of real-time temperature readings in Antarctica.\", class_=\"text-center\")\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"GitHub Source\", href=\"https://github.com/denisecase/cintel-05-cintel\", target=\"_blank\")\n    ui.a(\"GitHub App\", href=\"https://denisecase.github.io/cintel-05-cintel/\", target=\"_blank\")\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\"PyShiny Express\", href=\"https://shiny.posit.co/blog/posts/shiny-express/\", target=\"_blank\")\n\n    # Add a unit toggle switch to display either Fehrenheit or Celsius\n    ui.input_switch(\"use_fahrenheit\", \"Display in Fahrenheit\", value=False)\n\n# --------------------------------------------\n# Main UI Panels\n# --------------------------------------------\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-purple-blue\",\n    ):\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            # Get the latest reading and return a temperature string\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            temp_c = latest_dictionary_entry[\"temp\"]\n            if input.use_fahrenheit():\n                temp_f = round(temp_c * 9 / 5 + 32, 1)\n                return f\"{temp_f} \u00b0F\"\n            else:\n                return f\"{temp_c} \u00b0C\"\n        \"Live temperature reading\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Current Date and Time\")\n\n        @render.text\n        def display_time():\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Most Recent Readings\")\n\n    @render.data_frame\n    def display_df():\n        _, df, _ = reactive_calc_combined()\n        \n        # Create funtion to change display to show temperatures in Fahrenheit or Celsius\n        if input.use_fahrenheit():\n            df[\"Temperature (\u00b0F)\"] = df[\"temp\"] * 9 / 5 + 32\n            df_display = df[[\"Temperature (\u00b0F)\", \"timestamp\"]].rename(columns={\"timestamp\": \"Timestamp\"})\n        else:\n            df_display = df.rename(columns={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Timestamp\"})\n\n        # Use maximum width\n        return render.DataGrid(df_display, width=\"100%\")\n\nwith ui.card():\n    ui.card_header(\"Chart with Current Trend\")\n\n    @render_plotly\n    def display_plot():\n\n        # Fetch from the reactive calc function \n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n        \n        # Ensure the DataFrame is not empty before plotting\n        if not df.empty:\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n            if input.use_fahrenheit():\n                df[\"temp_display\"] = df[\"temp\"] * 9 / 5 + 32\n                y_label = \"Temperature (\u00b0F)\"\n            else:\n                df[\"temp_display\"] = df[\"temp\"]\n                y_label = \"Temperature (\u00b0C)\"\n\n            # Create scatter plot for readings \n            # Pass in the df, the name of the x column, the name of the y column, and more\n            fig = px.scatter(\n                df,\n                x=\"timestamp\",\n                y=\"temp_display\",\n                title=\"Temperature Readings with Regression Line\",\n                labels={\"temp_display\": y_label, \"timestamp\": \"Time\"},\n                color_discrete_sequence=[\"blue\"]\n            )\n\n            # Linear regression line\n            x_vals = list(range(len(df)))\n            y_vals = df[\"temp_display\"]\n            slope, intercept, _, _, _ = stats.linregress(x_vals, y_vals)\n            df[\"best_fit_line\"] = [slope * x + intercept for x in x_vals]\n\n            fig.add_scatter(\n                x=df[\"timestamp\"],\n                y=df[\"best_fit_line\"],\n                mode=\"lines\",\n                name=\"Regression Line\"\n            )\n\n            fig.update_layout(xaxis_title=\"Time\", yaxis_title=y_label)\n            \n            return fig\n", "type": "text"}]